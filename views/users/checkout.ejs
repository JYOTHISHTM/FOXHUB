<%- include('../layouts/header.ejs') %>
<%- include('../layouts/navbar.ejs') %>
<style>
  .billing-form .form-control {
    font-weight: 550;
    background: #fdfdfd !important;
    color: black !important;
    font-size: 15px;
  }
</style>
<div class="hero-wrap hero-bread" style="background-image: url('/assets/images/bg_6.jpg');">
  <div class="container">
    <div class="row no-gutters slider-text align-items-center justify-content-center">
      <div class="col-md-9 ftco-animate text-center">
        <p class="breadcrumbs"><span class="mr-2"><a href="/home">Home</a></span> <span>Checkout</span></p>
        <h1 class="mb-0 bread">Checkout</h1>
      </div>
    </div>
  </div>
</div>

<section class="ftco-section">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-xl-10 ftco-animate">
        <% if (typeof errorMessage !== 'undefined') { %>
          <div class="alert alert-danger" role="alert">
            <%= errorMessage %>
          </div>
        <% } %>
        <form id="paymentForm" action="/placeOrder" method="POST" class="billing-form">
          <a href="/addAddress" class="btn btn-primary add-address-btn"
            style="margin-left: 86%; margin-bottom: -12%; border-radius: 4%;">Add Address</a>
          <a href="/userAddress" class="btn btn-primary add-address-btn"
            style="margin-left: 70%; margin-bottom: -6%; border-radius: 4%;">Select Address</a>
          <h3 class="mb-4 billing-heading">Billing Details</h3>
          <div class="row align-items-end">
            <div class="col-md-12">
              <div class="form-group">
                <label for="state">State</label>
                <input type="text" class="form-control" name="state"
                  value="<%= selectedAddress && selectedAddress.state ? selectedAddress.state : '' %>" readonly>
              </div>
            </div>
            <div class="w-100"></div>
            <div class="col-md-12">
              <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" name="address"
                  value="<%= selectedAddress && selectedAddress.address ? selectedAddress.address : '' %>" readonly>
              </div>
            </div>
            <div class="w-100"></div>
            <div class="col-md-6">
              <div class="form-group">
                <label for="city">Town / City</label>
                <input type="text" class="form-control" name="city"
                  value="<%= selectedAddress && selectedAddress.city ? selectedAddress.city : '' %>" readonly>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label for="postalCode">Postcode / ZIP *</label>
                <input type="text" class="form-control" name="postalCode"
                  value="<%= selectedAddress && selectedAddress.postalCode ? selectedAddress.postalCode : '' %>" readonly>
              </div>
            </div>
          </div>

          <div class="row mt-5 pt-3 d-flex">
            <div class="col-md-6">
              <div class="cart-detail cart-total bg-light p-3 p-md-4 h-100">
                <h3 class="billing-heading mb-4">ORDER SUMMARY</h3>
                <% let subtotal = 0; if (cart && cart.items && cart.items.length > 0) { %>
                  <% cart.items.forEach(item => {
                    if (item.productId) {
                      const itemTotal = item.quantity * item.productPrice;
                      subtotal += itemTotal;
                  %>
                    <p class="d-flex">
                      <span><%= item.productName %></span>
                      <span><%= item.quantity %></span>
                      <span><%= itemTotal.toFixed(2) %></span>
                    </p>
                  <% } }) %>
                  <hr>
                  <p class="d-flex total-price">
                    <span>Subtotal</span>
                    <span></span>
                    <span id="subtotalAmount"><%= subtotal.toFixed(2) %></span>
                  </p>
                  <p class="d-flex discount-amount" id="discountRow" style="display: none;">
                    <span>Discount</span>
                    <span></span>
                    <span id="discountAmount">0.00</span>
                  </p>
                  <p class="d-flex total-price">
                    <span><strong>Total</strong></span>
                    <span></span>
                    <span id="totalAmount"><strong><%= subtotal.toFixed(2) %></strong></span>
                  </p>
                <% } else { %>
                  <p class="d-flex">
                    <span>No items found in cart</span>
                  </p>
                <% } %>
              </div>
            </div>
            <div class="col-md-6">
              <div class="cart-detail bg-light p-3 p-md-4 h-100">
                <h3 class="billing-heading mb-4">Payment Method</h3>
                <div class="form-group">
                  <div class="col-md-12">
                    <div class="radio">
                      <label>
                        <input type="radio" name="paymentMethod" value="Razorpay" class="mr-2" required> Razorpay
                      </label>
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <div class="col-md-12">
                    <div class="radio">
                      <label>
                        <input type="radio" name="paymentMethod" value="Cash on Delivery" class="mr-2" required> Cash on Delivery
                      </label>
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <div class="col-md-12">
                    <div class="radio">
                      <label>
                        <input type="radio" name="paymentMethod" value="Wallet" class="mr-2" required> Wallet
                      </label>
                    </div>
                  </div>
                </div>
                <input type="hidden" name="amount" id="amount" value="<%= subtotal.toFixed(2) %>">
                <div class="form-group">
                  <label for="couponCode">Coupon Code</label>
                  <input type="text" class="form-control" id="couponCode" name="couponCode" placeholder="Enter coupon code">
                  <button type="button" id="applyCouponBtn" class="btn btn-secondary mt-2">Apply Coupon</button>
                </div>
                <p><button id="placeOrderBtn" type="button" class="btn btn-primary py-3 px-4">Place an order</button></p>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


<script>
  document.addEventListener('DOMContentLoaded', function () {
  const applyCouponBtn = document.getElementById('applyCouponBtn');
  const placeOrderBtn = document.getElementById('placeOrderBtn');
  
  if (applyCouponBtn) {
    applyCouponBtn.addEventListener('click', handleApplyCoupon);
  }
  
  if (placeOrderBtn) {
    placeOrderBtn.addEventListener('click', handlePlaceOrder);
  }
  
  // Configure Toastr options
  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": false,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "5000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  };
});
async function handleApplyCoupon() {
  console.log('handleApplyCoupon function called');

  // Get and validate coupon code input
  const couponCodeInput = document.getElementById('couponCode');
  if (!couponCodeInput) {
    console.error('Coupon code input not found');
    toastr.error('An error occurred. Please try again later.');
    return;
  }
  const couponCode = couponCodeInput.value.trim();
  if (!couponCode) {
    toastr.error('Please enter a coupon code.');
    return;
  }
  console.log('Coupon code:', couponCode);

  // Get and validate subtotal
  const subtotalElement = document.getElementById('subtotalAmount');
  if (!subtotalElement) {
    console.error('Subtotal element not found');
    toastr.error('An error occurred. Please try again later.');
    return;
  }
  const subtotal = parseFloat(subtotalElement.textContent.replace(/[^0-9.-]+/g, ''));
  if (isNaN(subtotal)) {
    console.error('Invalid subtotal value');
    toastr.error('An error occurred. Please try again later.');
    return;
  }
  console.log('Subtotal:', subtotal);

  // Get and validate selected address
  let selectedAddressIndex = 'default';
  const addressRadios = document.querySelectorAll('input[name="address"]');
  console.log('Number of address radio buttons found:', addressRadios.length);
  
  if (addressRadios.length > 0) {
    const selectedAddressRadio = document.querySelector('input[name="address"]:checked');
    if (selectedAddressRadio) {
      selectedAddressIndex = selectedAddressRadio.value;
      console.log('Selected address index:', selectedAddressIndex);
    } else {
      console.warn('No address selected');
      toastr.warning('No address selected. Using default.');
    }
  } else {
    console.warn('No address radio buttons found');
    toastr.warning('Address selection not available. Proceeding with default.');
  }

  try {
    console.log('Sending request to apply coupon');
    // Send request to apply coupon
    const response = await fetch('/apply-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode, orderTotal: subtotal, selectedAddress: selectedAddressIndex })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('Server response:', data);

    if (data.success) {
      // Calculate discount and update UI
      const discountAmount = subtotal - parseFloat(data.discountedAmount);
      const discountedTotal = parseFloat(data.discountedAmount);

      console.log('Discount amount:', discountAmount);
      console.log('Discounted total:', discountedTotal);

      // Update discount row
      const discountRow = document.getElementById('discountRow');
      const discountAmountElement = document.getElementById('discountAmount');
      if (discountRow && discountAmountElement) {
        discountRow.style.display = 'flex';
        discountAmountElement.textContent = `-$${discountAmount.toFixed(2)}`;
      } else {
        console.error('Discount row or amount element not found');
      }

      // Update total amount
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.innerHTML = `<strong>$${discountedTotal.toFixed(2)}</strong>`;
      } else {
        console.error('Total amount element not found');
      }

      // Update hidden input
      const amountInput = document.getElementById('amount');
      if (amountInput) {
        amountInput.value = discountedTotal.toFixed(2);
      } else {
        console.error('Amount input not found');
      }

      toastr.success('Coupon applied successfully.');
    } else {
      toastr.error(data.message || 'Failed to apply coupon.');
    }
  } catch (error) {
    console.error('Error applying coupon:', error);
    toastr.error('An error occurred while applying the coupon. Please try again later.');
  }
}

// Attach the function to the button click event and set up address selection logging
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM fully loaded');
  const applyCouponButton = document.getElementById('applyCouponButton');
  if (applyCouponButton) {
    applyCouponButton.addEventListener('click', handleApplyCoupon);
    console.log('Apply coupon button event listener attached');
  } else {
    console.error('Apply coupon button not found');
  }

  // Log when an address is selected
  document.body.addEventListener('change', function(event) {
    if (event.target && event.target.name === 'address') {
      console.log('Address selected:', event.target.value);
    }
  });

  // Log initial state of address selection
  const addressRadios = document.querySelectorAll('input[name="address"]');
  console.log('Initial address radio buttons state:');
  addressRadios.forEach((radio, index) => {
    console.log(`Address ${index}: ${radio.checked ? 'checked' : 'unchecked'}`);
  });
});



async function handlePlaceOrder() {
  const form = document.getElementById('paymentForm');
  const formData = new FormData(form);
  const paymentMethod = formData.get('paymentMethod');
  let amount = parseFloat(formData.get('amount'));
  const couponCode = formData.get('couponCode').trim();
  const address = formData.get('address');

  console.log("Payment Method:", paymentMethod);
  console.log("Final Amount:", amount);
  console.log("Coupon Code:", couponCode);
  console.log("Address:", address);

  if (!validateOrder(address, paymentMethod, amount)) {
    return;
  }

  try {
    console.log("Proceeding with payment, Amount:", amount);
    await proceedWithPayment(paymentMethod, amount);
  } catch(error) {
    console.error('Error processing order:', error);
    toastr.error('An error occurred while processing your order. Please try again.');
  }
}

function validateOrder(address, paymentMethod, amount) {
  if (!address) {
    toastr.error('Please select an address before placing an order.');
    return false;
  }
  if (!paymentMethod) {
    toastr.error('Please select a payment method.');
    return false;
  }
  if (paymentMethod === 'Cash on Delivery' && amount > 1000) {
    toastr.error('Cash on Delivery is not allowed for orders over $1000. Please choose another payment method.');
    return false;
  }
  return true;
}

async function proceedWithPayment(paymentMethod, amount) {
  console.log("Proceeding with payment method:", paymentMethod, "Amount:", amount);
  switch (paymentMethod) {
    case 'Razorpay':
      await initiateRazorpayPayment(amount);
      break;
    case 'Cash on Delivery':
      document.getElementById('paymentForm').submit();
      break;
    case 'Wallet':
      await checkWalletBalanceAndSubmitForm(amount);
      break;
    default:
      toastr.error('Invalid payment method selected.');
  }
}

async function initiateRazorpayPayment(amount) {
  console.log("Initiating Razorpay payment with amount:", amount);
  try {
    if (!amount || isNaN(amount) || amount <= 0) {
      throw new Error('Invalid amount. Please enter a valid amount.');
    }

    const response = await fetch('/create-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: parseFloat(amount) })
    });

    if (!response.ok) throw new Error('Network response was not ok');
    const data = await response.json();
    console.log("Received payment creation response:", data);

    const options = {
      key: data.key,
      amount: data.amount,
      currency: 'INR',
      name: 'FOXHUB',
      description: 'Payment for your order',
      order_id: data.id,
      handler: function (response) {
        handleRazorpayResponse(response, data.id);
      },
      modal: {
        ondismiss: function() {
          handlePaymentFailure(data.id);
        }
      }
    };

    const rzp = new Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error('Error creating payment:', error);
    toastr.error('Error creating payment. Please try again.');
  }
}

function handlePaymentFailure(orderId) {
  console.log('Payment failed or modal dismissed');
  fetch('/handle-failed-razorpay-payment', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ orderId })
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        toastr.warning('Your payment was not successful. The order status has been set to pending.');
        setTimeout(() => window.location.href = '/userOrders', 3000);
      } else {
        throw new Error(data.message || 'Failed to process order failure');
      }
    })
    .catch(error => {
      console.error('Error handling payment failure:', error);
      toastr.error('An error occurred while processing your order. Please check your orders page for status.');
      setTimeout(() => window.location.href = '/userOrders', 3000);
    });
}

async function handleRazorpayResponse(response, orderId) {
  try {
    response.order_id = orderId;
    const verifyResponse = await fetch('/verify-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(response)
    });

    const data = await verifyResponse.json();
    console.log("Received payment verification response:", data);
    if (data.status === 'success') {
      document.getElementById('paymentForm').submit();
    } else {
      toastr.error('Payment verification failed. Please try again.');
    }
  } catch (error) {
    console.error('Error verifying payment:', error);
    toastr.error('Error verifying payment. Please try again.');
  }
}

async function checkWalletBalanceAndSubmitForm(amount) {
  console.log("Checking wallet balance for amount:", amount);
  try {
    const response = await fetch('/check-wallet-balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount })
    });
    const data = await response.json();
    console.log("Wallet Balance Check Response:", data);
    if (data.sufficientBalance) {
      await deductFromWalletAndSubmitForm(amount);
    } else {
      toastr.error('Insufficient balance in your wallet. Please choose another payment method.');
    }
  } catch (error) {
    console.error('Error checking wallet balance:', error);
    toastr.error('An error occurred while checking the wallet balance. Please try again later.');
  }
}

async function deductFromWalletAndSubmitForm(amount) {
  console.log("Deducting from wallet amount:", amount);
  try {
    const response = await fetch('/deduct-from-wallet', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount })
    });
    const data = await response.json();
    console.log("Wallet deduction response:", data);
    if (data.success) {
      document.getElementById('paymentForm').submit();
    } else {
      toastr.error('Error deducting amount from wallet. Please try again.');
    }
  } catch (error) {
    console.error('Error deducting amount from wallet:', error);
    toastr.error('Error deducting amount from wallet. Please try again.');
  }
}
</script>


    <%- include('../layouts/footer.ejs') %>